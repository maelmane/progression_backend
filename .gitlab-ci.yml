image: docker/compose:1.29.2

default:
  tags: [docker]

services:
  - docker:20.10.16-dind

# Select what we should cache
cache:
  paths:
  - progression/vendor

stages:
  - verifications
  - build_image
  - test
  - tag_image
  - deploy_image
  - build_doc
  - deploy_doc

variables:
  PROGRESSION_DIR: $CI_PROJECT_DIR
  DOCKER_TLS_CERTDIR: ""
  BRANCHE: $CI_COMMIT_REF_NAME

.preparer_contexte: &preparer_contexte
    - DOCKER_HOST=
    - apk add ca-certificates openssh
    - mkdir ~/.ssh && cp $ID_RSA ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa
    - echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
    - docker context create --docker host=ssh://$CD_USER@$CD_HOST:$CD_PORT --description="Production" prod
    - docker context use prod

.login: &login
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY


# Stage verifications

version_check:
  stage: verifications
  needs: []
  script:
    - docker run -v $PWD:/progression_backend bitnami/git bash -c 'git config --global --add safe.directory /progression_backend && cd /progression_backend && VERSION_PREV=$(git show HEAD^:VERSION|cut -d "=" -f 2); VERSION_ACT=$(git show HEAD:VERSION|cut -d "=" -f 2); echo Version: $VERSION_PREV  → $VERSION_ACT; dpkg --compare-versions "$VERSION_ACT" "gt" "$VERSION_PREV" || ( echo ERREUR la version n’a pas avancé && exit 1 )'
  allow_failure: true
  only:
  - master


# Stage build_image

# Construction de l'image
const_image:
  stage: build_image
  needs: []
  before_script: *login
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - docker build --target composer --cache-from $CI_REGISTRY/$CI_PROJECT_PATH:${BRANCHE}_composer --build-arg BUILDKIT_INLINE_CACHE=1 -t $CI_REGISTRY/$CI_PROJECT_PATH:${BRANCHE}_composer -f docker/Dockerfile .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:${BRANCHE}_composer
    - docker build --cache-from $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE --build-arg BUILDKIT_INLINE_CACHE=1 -t $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE -f docker/Dockerfile .
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE


# Stage test

# Tests unitaires
test_unitaires:
  stage: test
  needs:
    - job: const_image
      optional: true
  variables:
    ENV_FILE: env.exemple
  script:
    - docker-compose pull tests
    - docker-compose run -v $PROGRESSION_DIR/reports/:/var/www/progression/reports tests

  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: $PROGRESSION_DIR/reports/coverage.xml

# Linter
linter:
  stage: test
  needs:
    - job: const_image
      optional: true
  variables:
    ENV_FILE: env.exemple
  script:
    - docker-compose run lint


# Stage tag

tag_latest:
  stage: tag_image
  needs: [ version_check, const_image, test_unitaires, linter ]
  before_script:
    - *login
  script:
    - docker pull $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE
    - docker tag $CI_REGISTRY/$CI_PROJECT_PATH:$BRANCHE $CI_REGISTRY/$CI_PROJECT_PATH:latest
    - docker push $CI_REGISTRY/$CI_PROJECT_PATH:latest
  only:
    - master


# Stage deploy_image

# Déploiement sur /dev
deploy_dev:
  stage: deploy_image
  needs: [test_unitaires, linter]
  environment:
    name: dev
    url: $URL_DEV
    on_stop: stop_dev
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=dev docker-compose pull api
    - TAG_DEPLOY=dev docker-compose -p dev up --force-recreate -d api
  only:
    - dev

stop_dev:
  stage: deploy_image
  environment:
    name: dev
    action: stop
  before_script:
    - *preparer_contexte
  script:
    - docker-compose -p dev stop api
  only:
    - dev
  when:
    manual

# Déploiement sur /demo
deploy_demo:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: demo
    url: $URL_DEMO
    on_stop: stop_demo
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull api
    - TAG_DEPLOY=latest docker-compose -p demo up --force-recreate -d api
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_DEMO'

stop_demo:
  stage: deploy_image
  environment:
    name: demo
    action: stop
  before_script:
    - *preparer_contexte
  script:
    - docker-compose -p demo stop api
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_DEMO'
  when:
    manual

# Déploiement sur /staging
deploy_staging:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: staging
    url: $URL_STAGING
    on_stop: stop_staging
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull api
    - TAG_DEPLOY=latest docker-compose -p staging up --force-recreate -d api
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_STAGING'

stop_staging:
  stage: deploy_image
  environment:
    name: staging
    action: stop
  before_script:
    - *preparer_contexte
  script:
    - docker-compose -p staging stop api
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_STAGING'
  when:
    manual

# Déploiement sur le serveur de prod #1
deploy_prod:
  stage: deploy_image
  needs: [tag_latest]
  environment:
    name: prod
    url: $URL_PROD
    on_stop: stop_prod
  before_script:
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull api
    - TAG_DEPLOY=latest docker-compose -p prod up --force-recreate -d api
  when:
    manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_PROD'

stop_prod:
  stage: deploy_image
  environment:
    name: prod
    action: stop
  before_script:
    - *preparer_contexte
  script:
    - docker-compose -p prod stop api db redis
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_PROD'
  when:
    manual

# Déploiement sur le serveur de prod #2
deploy_crosemont:
  stage: deploy_image
  needs: [tag_latest]
  tags:
    - docker
    - crosemont
  environment:
    name: crosemont
    url: $URL_PROD_2
    on_stop: stop_crosemont
  before_script:
    - export CD_HOST=$CD_HOST_2 CD_PORT=$CD_PORT_2 CD_USER=$CD_USER_2
    - *preparer_contexte
    - *login
  script:
    - TAG_DEPLOY=latest docker-compose pull api
    - TAG_DEPLOY=latest docker-compose -p prod up --force-recreate -d api
  when:
    manual
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_PROD_2'

stop_crosemont:
  stage: deploy_image
  tags:
    - docker
    - crosemont
  environment:
    name: crosemont
    action: stop
  before_script:
    - export CD_HOST=$CD_HOST_2 CD_PORT=$CD_PORT_2 CD_USER=$CD_USER_2
    - *preparer_contexte
  script:
    - docker-compose -p prod stop api db redis
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_PROD_2'
  when:
    manual


# Stage build_doc

# Production de la documentation master
pages_master:
  stage: build_doc
  needs:
    - job: deploy_demo
      optional: true
  variables:
    PROGRESSION_API_URL: $URL_DEMO
  script:
  - docker run -e PROGRESSION_API_URL=$PROGRESSION_API_URL -v "$PROGRESSION_DIR/:/tmp/" $CI_REGISTRY/progression/dev:latest emacs --batch --load ~/.emacs.el --load /tmp/doc/publish.el --funcall org-publish-all
  - mkdir public && cp -r $PROGRESSION_DIR/progression/app/html/doc/* public/
  - "! grep -c nil public/api.html # Vérifie que la production de l'API n'a pas produit d'erreur"
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_DEMO'
  artifacts:
    paths:
    - public


# Stage deploy_doc

# Déploiement de la doc
pages:
  stage: deploy_doc
  needs:
    - job: pages_master
      optional: true
  script:
    - echo OK #apparemment nécessaire...
  artifacts:
    paths:
    - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $URL_DEMO'
