#+SETUPFILE: https://plafrance.pages.dti.crosemont.quebec/org-html-themes/org/theme-readtheorg.setup

#+TITLE: API Progression
#+PROPERTY: header-args:bash :results output :exports both :noweb yes

* Point d'entrée

| Méthode | URL | Description              | Paramètres | Réponse |
|---------+-----+--------------------------+------------+---------|
| GET     | ~/~ | Configuration du serveur |            | Config  |

** Liens :

| Nom         | Description                  |
|-------------+------------------------------|
| inscription | Inscription d'un utilisateur |

* Authentification

Trois méthodes permettent l'authentification pour n'importe quelle requête :

1. Identifiant et mot de passe

   Dans l'entête ~Authorization~, méthode ~Basic~, les paramètres suivants séparés par des deux-points (:) et encodés en base64

   | Paramètre   | Description                   | Type | Défaut |
   |-------------+-------------------------------+------+--------|
   | identifiant | Nom d'utilisateur ou courriel | str  |        |
   | password    | Mot de passe                  | str  |        |
   | domaine     | Domaine LDAP                  | str  | ""     |

   Exemple : ~Authorization: Basic Ym9iOnBhc3N3b3JkOmV4ZW1wbGUuY29t~
   
2. Identifiant et clé d'accès

   Dans l'entête ~Authorization~, méthode ~Key~, les paramètres suivants séparés par des deux-points (:) et encodés en base64

   | Paramètre   | Description                   | Type | Défaut |
   |-------------+-------------------------------+------+--------|
   | identifiant | Nom d'utilisateur ou courriel | str  |        |
   | key_name    | Identifiant de la clé         | Clé  |        |
   | key_secret  | Secret correspondant à la clé | str  |        |

   La clé nommée par ~key_name~ doit exister avec la portée «auth». Le secret peut alternativement être passé via cookie sécurisé.

3. Token JWT

   Dans l'entête ~Authorization~, un [[*Token][Token]] «au porteur» :

   ~Authorization: Bearer <token JWT>~


* Autorisation

L'autorisation d'accéder aux ressources est donnée par un [[*Token][Token]] dans l'entête ~Authorization~ ou dans le paramètre ~tkres~ :

   | Paramètre   | Description                   | Type  | Défaut |
   |-------------+-------------------------------+-------+--------|
   | identifiant | Nom d'utilisateur ou courriel | str   |        |
   | tkres       | Token d'accès                 | Token |        |


* Ressources

Les ressources échangées sont représentées en format [[https://jsonapi.org][JSON-API]]

** Avancement

L'avancement d'un utilisateur pour une question.

*** Identifiant :
username/question_uri

*** Propriétés :

| Nom               | Type | Valeurs      | Description                                                            |
|-------------------+------+--------------+------------------------------------------------------------------------|
| état              | str  | "début"      | Aucune tentative envoyée                                               |
|                   |      | "non_réussi" | Au moins une tentative, mais aucune n'est réussie                      |
|                   |      | "réussi"     | Au moins une tentative dont une réussie                                |
| titre             | str  |              | Le titre de la question tel qu'il était lors de la dernière tentative  |
| niveau            | str  |              | Le niveau de la question tel qu'il était lors de la dernière tentative |
| date_modification | int  |              | La date de la dernière tentative                                       |
| date_réussie      | int  |              | La date de la première tentative réussie                               |
| extra             | str  |              | Infos extra à stoquer avec l'Avancement                                |

*** Relations :

| Nom        | Cardinalité | Type       | Description                    |
|------------+-------------+------------+--------------------------------|
| tentatives | 1-n         | Tentatives | liste de Tentatives effectuées |

*** Liens :

| Nom       | Description                      |
|-----------+----------------------------------|
| tentative | Soumettre une nouvelle tentative |

** Clé

Une clé donnant accès à un sous-ensemble des services ou ressources de l’API. Les clés peuvent être octroyées temporairement ou être révoquées. Une clé peut être utilisée en lieu et place d’un mot de passe au moment d’effectuer une authentification. Le token JWT retourné après une authentification réussie peut être utilisé pour accéder aux services et ressources donnés par la portée de la clé.

*** Identifiant :
username/nom

*** Propriétés : 

| Nom        | Type | Valeurs            | Description                                               |
|------------+------+--------------------+-----------------------------------------------------------|
| secret     | str  |                    | valeur secrète de la clé                                  |
| création   | int  |                    | Timestamp de création                                     |
| expiration | int  |                    | Timestamp d'expiration, 0=n'expire jamais                 |
| portée     | str  |                    | Service ou ressource accessible par la clé.               |
|            |      | "révoquée"         | La clé est révoquée pour tout service ou ressource        |
|            |      | "authentification" | La clé peut être utilisée pour authentifier l’utilisateur |
|------------+------+--------------------+-----------------------------------------------------------|

** Config

Configuration du serveur

| Nom     | Type | Valeurs | Description                    |
|---------+------+---------+--------------------------------|
| config  | dict |         | Dictionnaire de configurations |
| version | str  |         | Version actuelle du serveur    |

** Commentaire

Un message sur une tentative écrit par un utilisateur.

*** Identifiant :
username/question_uri/date_soumission/numéro

*** Propriétés:

| Nom          | Type | Valeurs | Description                                  | Défaut                  |
|--------------+------+---------+----------------------------------------------+-------------------------|
| message      | str  |         |                                              |                         |
| créateur     | str  |         | nom d'utilisateur du créateur                | Utilisateur authentifié |
| date         | int  |         | timestamp de création                        | Date courante           |
| numéro_ligne | int  |         | numéro de ligne où s'applique le commentaire |                         |

** Ébauche

Une ébauche de solution fournie comme point de départ à la résolution de l'exercice.

*** Identifiant :
question_uri/langage

*** Propriétés:

| Nom     | Type | Valeurs | Description                           |
|---------+------+---------+---------------------------------------|
| langage | str  |         | Langage de programmation de l'ébauche |
| code    | str  |         | Code de l'ébauche                     |

** Question

Une question générique.

*** Identifiant :
URI

*** Hiérarchie

#+begin_src text
Question          
▲                 
├ QuestionProg    
├ QuestionSys     
└ QuestionBD
#+end_src


*** Propriétés :

| Nom         | Type                 | Valeurs      | Description |
|-------------+----------------------+--------------+-------------|
| niveau      | str                  |              |             |
| titre       | str                  |              |             |
| description | str                  |              |             |
| objectif    | str                  |              |             |
| énoncé      | str ou liste de dict |              |             |
| auteur      | str                  |              |             |
| licence     | str                  |              |             |
| sous_type   | str                  | questionProg |             |
|             |                      | questionSys  |             |
|             |                      | questionBD   |             |

** Question (sous-type QuestionProg)

Une question spécifiquement de programmation.

*** Relations :
| Nom        | Cardinalité | Type       | Description                   |
|------------+-------------+------------+-------------------------------|
| ebauches   | 1-n         | Ébauche    | liste d’ébauches de Solution  |
| tests      | 1-n         | Test       | liste de Tests de validation  |

** Question (sous-type QuestionSys)

Une question spécifiquement de type système

*** Relations :
| Nom           | Cardinalité | Type | Description                     |
|---------------+-------------+------+---------------------------------|
| image         | 1           | str  | image du conteneur              |
| utilisateur   | 1           | str  | utilisateur du conteneur        |
| solution      | 1           | str  | solution du test, s'il y a lieu |
| tests         | 1-n         | Test | liste de Tests de validation    |

** Résultat

Le résultat d'un test pour une solution proposée.

*** Identifiant :
username/question_uri/hash

*** Propriétés:

| Nom             | Type | Valeurs | Description                                                                                                |
|-----------------+------+---------+------------------------------------------------------------------------------------------------------------|
| sortie_observée | str  |         | Sortie standard du Test                                                                                    |
| sortie_erreur   | str  |         | Sortie d'erreur du Test                                                                                    |
| résultat        | bool |         | Vrai si le Test a été validé avec un code de retour de 0 et une sortie observée égale à la sortie attendue |
| feedback        | str  |         | Rétroaction pour ce résultat de test                                                                       |
| temps_exécution | int  |         | temps d'exécution en ms                                                                                    |

** Sauvegarde automatique

La sauvegarde automatique du travail d'un utilisateur pour une question et dans un langage spécifique.

*** Identifiant :
username/question_uri/langage

*** Propriétés:

| Nom             | Type | Valeurs   |
|-----------------+------+-----------|
| date_sauvegarde | int  | timestamp |
| code            | str  |           |

** Tentative

Une tentative de réponse à une question.

*** Identifiant :
username/question_uri/date_soumission

*** Hiérarchie

#+begin_src text
Tentative 
▲ 
├ TentativeProg 
├ TentativeSys 
├ TentativeBD 
#+end_src

*** Propriétés :

| Nom             | Type | Valeurs       | Description                                                |
|-----------------+------+---------------+------------------------------------------------------------|
| date_soumission | int  |               | timestamp                                                  |
| feedback        | str  |               |                                                            |
| réussi          | bool |               | vrai ssi la tentative a correctement répondu à la question |
| temps_exécution | int  |               | temps d'exécution en ms                                    |
| sous-type       | str  | tentativeProg | Sous-type de la ressource                                  |
|                 |      | tentativeSys  |                                                            |
|                 |      | tentativeBD   |                                                            |

*** Relations :

| Nom       | Cardinalité | Type     | Description           |
|-----------+-------------+----------+-----------------------|
| résultats | 1-n         | Résultat | les résultats de test |

** Tentative (sous-type tentativeProg)

Une tentative de réponse à une QuestionProg.

*** Propriétés:

| Nom           | Type | Valeurs | Description             |
|---------------+------+---------+-------------------------|
| langage       | str  |         | Langage de la tentative |
| code          | str  |         | Code de la tentative    |
| tests_réussis | int  |         | nb de tests réussis     |

** Tentative (sous-type tentativeSys)

Une tentative de réponse à une QuestionSys.

*** Propriétés:

| Nom           | Type | Valeurs | Description                        |
|---------------+------+---------+------------------------------------|
| conteneur     | str  |         | identifiant du conteneur           |
| réponse       | str  |         | Réponse à une question  à solution |
| tests_réussis | int  |         | nb de tests réussis                |

*** Relations :

| Nom       | Cardinalité | Type     | Description           |
|-----------+-------------+----------+-----------------------|
| résultats | 1-n         | Résultat | les résultats de test |

** Test

Un test de validation d’une question auquel sont soumises les solutions proposées.

*** Identifiant :
question_uri/numéro

*** Propriétés :

| Nom             | Type | Valeurs | Description                                           |
|-----------------+------+---------+-------------------------------------------------------|
| nom             | str  |         |                                                       |
| sortie_attendue | str  |         | La sortie attendue, ou null si sortie_cachée est vrai |
| feedback_pos    | str  |         |                                                       |
| feedback_neg    | str  |         |                                                       |
| caché           | bool |         | vrai si les entrées et sorties ont été caviardées     |


** TestProg (soustype de Test)

Un test de validation d'une QuestionProg auquel sont soumises les solutions proposées.

*** Propriétés :

| Nom          | Type | Valeurs | Description                                                   |
|--------------+------+---------+---------------------------------------------------------------|
| entrée       | str  |         | L'entrée du programme ou null si sortie_cachée est vrai       |
| params       | str  |         | Les paramètres du programme ou null si sortie_cachée est vrai |
| feedback_err | str  |         |                                                               |

** TestSys (soustype de Test)

Un test de validation d'une QuestionSys auquel sont soumises les solutions proposées.

*** Propriétés :

| Nom         | Type | Valeurs | Description                |
|-------------+------+---------+----------------------------|
| validation  | str  |         | Script de validation       |
| utilisateur | str  |         | l'utilisateur du conteneur |

** Token

Un token JWT donnant accès à une ou plusieurs ressources. Une date d'expiration de 0 signifie que le token n'expire jamais.

*** Propriétés :

| Nom         | Type | Valeurs | Description                                                                      |
|-------------+------+---------+----------------------------------------------------------------------------------|
| username    | str  |         | l'utilisateur propriétaire du token                                              |
| création    | int  |         | timestamp à la création                                                          |
| expiration  | int  |         | timestamp d'expiration ou "+n" ou n est le nombre de secondes avant l'expiration |
| data        | str  |         | données incluses dans le token                                                   |
| ressources  | str  |         | ressources permises par le token                                                 |
| jwt         | str  |         | token jwt signé                                                                  |
| fingerprint | str  |         | empreinte (sha256) du contexte aléatoire du token fourni via un cookie sécurisé. |
| version     | int  |         | version de l'api ayant généré le token                                           |

**** Data

data contient un objet peuplé de n'importes quelles données utiles au destinataire du token.

**** Expiration

Lorsqu'on soumet un nouveau token, l'expiration peut être exprimée de façon absolue, sous forme de timestamp en secondes depuis 1/1/1970 (ex.: 1685831340) ou de façon relative en nombre de secondes après la création du token (ex.: "+300")

***** Exemple :

#+begin_src json
{
  "user" : {
    "username" : "bob",
    "..."
  },
  "config" : {
    "var1": 42,
  }
}
#+end_src


**** ressources

Les ressources sont définies par leur URI et par la méthode de requête HTTP, avec une expression régulière. Un token ressource peut décrire une ou plusieurs ressources.

***** Exemple :

#+begin_src json
{
  "get_bob" : {
    "url" : "^/user/bob$",
    "method" : "^GET$"
  }
}
#+end_src

*** Relations

| Nom  | Cardinalité | Type | Description                                   |
|------|-------------|------|-----------------------------------------------|
| user |         1-1 | User | l'utilisateur pour lequel a été créé le token |

** Utilisateur

Un utilisateur du système.

*** Identifiant :
username

*** Propriétés :

| Nom         | Type | Valeurs                                        | Description                              |
|-------------+------+------------------------------------------------+------------------------------------------|
| username    | str  |                                                |                                          |
| courriel    | str  |                                                |                                          |
| état        | str  | "inactif", "actif", "en_attente_de_validation" |                                          |
| rôle        | str  | "normal", "admin"                              |                                          |
| préférences | str  |                                                | chaîne JSON décrivant les préférences UI |
|-------------+------+------------------------------------------------+------------------------------------------|

*** Relations :

| Nom         | Cardinalité | Type       | description                       |
|-------------+-------------+------------+-----------------------------------|
| avancements | 1-n         | Avancement | Liste d'avancements               |
| cles        | 1-n         | Clé        | Liste de clés                     |
| tokens      | 1-n         | Token      | Liste de tokens en écriture seule |


* Exemples

#+NAME: get_api_url
#+begin_src sh :exports none
if [ -z "$PROGRESSION_API_URL" ]
then
	echo -n "https://progression.dti.crosemont.quebec/demo/api/v1"
else
	echo -n $PROGRESSION_API_URL
fi
#+end_src

#+begin_warning
Les exemples reflètent les résultats réels sur la plus récente version de l’API disponible sur call_get_api_url().
#+end_warning

#+name: setup
#+BEGIN_SRC bash :eval yes :session *bash* :exports none :results none
curl() {
	/usr/bin/curl -s -w "\n" "$@" | base64
}

export -f curl

# Inscription
/usr/bin/curl "<<get_api_url()>>/user" -X PUT --data '{"username": "jdoe"}' -H "Content-Type: application/json" | grep -Po '(?<=Token":").*(?=")'

# Récupère le token
export TOKEN=$(/usr/bin/curl "<<get_api_url()>>/user/jdoe/tokens" -H 'Authorization: basic amRvZTo=' --data '{"data" : {"ressources": {"tout": {"url": ".*", "method": ".*"}}, "expiration": "+30"}}' -H "Content-Type: application/json" | grep -Po '(?<=jwt":")[^"]*')

#+END_SRC

#+NAME: json_pretty
#+begin_src python :eval yes :var json_str="{}" :results output :exports none
import json
import sys
import base64

def decode_b64( b64_str ):
    try:
        return base64.b64decode(b64_str)
    except:
        return b64_str

def decode_json( json_str ):    
    try:
        return json.loads(json_str)
    except:
        return json_str

def formatte_json( json_str ):
    try:
        return json.dumps( json_str, ensure_ascii=False, indent=4 )
    except:
        return json_str
    
print( formatte_json( decode_json( decode_b64( json_str ) ) ) )
#+end_src

#+RESULTS: json_pretty

** Obtenir la configuration du serveur

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/"
#+END_SRC

** Inscription en tant qu’utilisateur ~jdoe~

#+NAME: AUTHENTIFICATION
#+BEGIN_SRC bash :eval yes :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/user/jdoe" -X PUT --data '{"username": "jdoe"}' -H "Content-Type: application/json"
#+END_SRC


** Obtenir un token pour ~jdoe~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "data": {
    "ressources": {
      "tout": {
        "url": ".*",
        "method": ".*"
      }
    },
    "expiration": "+30"
  }
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*) 
curl "<<get_api_url()>>/user/jdoe/tokens" -H 'Authorization: basic amRvZTo=' --data "$DATA" -H "Content-Type: application/json"
#+END_SRC

** Obtenir le profil de l’utilisateur authentifié ~jdoe~

#+NAME: USER
#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/user/jdoe" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Mettre à jour les préférences de ~jdoe~

#+begin_src bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
DATA='{"préférences": "{\"thème\": \"sombre\"}"}'

curl "<<get_api_url()>>/user/jdoe" --data $DATA -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+end_src

** Obtenir la question «Les fonctions avec paramètres/Rectangle» et ses tests: 

Cette question est disponible à l’URL suivant :
https://progression.pages.dti.crosemont.quebec/contenu/prog_1/9bdf5f1a-489a-441f-9e6e-2c87bba58bf8/info.yml

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/question/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw?include=tests" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir la question «Les fonctions avec paramètres/Rectangle», ses tests et ses ébauches: 

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/question/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw?include=tests,ebauches" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Créer l’avancement de jdoe à la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "question_uri":"aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw"
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" <<get_api_url()>>/user/jdoe/avancements -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir l’avancement de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir l’ébauche de solution en Python pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/ebauche/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/python" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Soumettre une tentative de solution à la question «Les fonctions avec paramètres/Rectangle» et récupérer les résultats

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
	"langage":"python",
	"code":"# Fonction qui calcule et produit en sortie le périmètre du rectangle dont les côtés sont reçus en paramètre. À faire\ndef périmètre( une_largeur, une_longueur ):\n    # -TODO\n    # -VISIBLE\n\n\n    # +VISIBLE\n    # +TODO\n    print(42)\n\n# -TODO\n# Fonction qui calcule et produit en sortie l'aire du rectangle dont les côtés sont reçus en paramètre. À faire\n# +TODO\n\n\n\n# -TODO\n# Programme principal\n# -VISIBLE\n\n# +VISIBLE\n# Entrées\nlargeur = int( input() )\nlongueur = int( input() )\n\n# Appel des fonctions, les côtés du rectangle sont transmis en paramètre. À faire\npérimètre( largeur, longueur )\n# +TODO\n\n\n# -TODO\n# -VISIBLE\n\n\n\n\n\n\n"
}
EOF
)
#+END_SRC

#+NAME: get_tentative
#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*) :cache yes
curl --data "$DATA" <<get_api_url()>>/avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/tentatives?include=resultats -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

#+begin_src bash :eval yes :session *bash* :results none :exports none
sleep 1 #Petit moment d'attente pour s'assurer que la prochaine tentative n'aura pas le même timestamp
#+end_src

** Obtenir une tentative de solution préalablement soumise pour la question «Les fonctions avec paramètres/Rectangle»

#+NAME: get_timestamp
#+BEGIN_SRC bash :eval yes :session *bash* :var RES_TENTATIVE=get_tentative :results output :exports none
TIMESTAMP=$(echo $RES_TENTATIVE | grep -Po '(?<="date_soumission": )\d*')
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/tentative/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/$TIMESTAMP" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir le test numéro 0 pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/test/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/0" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir un token ressource qui donne accès à un avancement de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle»

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
 [
      {
  	    "uri":"^avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw$",
  	    "method":"^GET$"
      }
 ]
}
EOF
)
#+END_SRC


#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" "<<get_api_url()>>/user/jdoe/tokens" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Créer ou mettre à jour la sauvegarde de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle» et un code ~python~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "langage":"python",
  "code": "#+TODO\nSystem.out.println('Allo le monde');\n#-TODO"
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" <<get_api_url()>>/avancement/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/sauvegardes -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Obtenir la dernière sauvegarde de ~jdoe~ pour la question «Les fonctions avec paramètres/Rectangle» effectuée avec le langage ~python~: 

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl "<<get_api_url()>>/sauvegarde/jdoe/aHR0cHM6Ly9wcm9ncmVzc2lvbi5wYWdlcy5kdGkuY3Jvc2Vtb250LnF1ZWJlYy9jb250ZW51L3Byb2dfMS85YmRmNWYxYS00ODlhLTQ0MWYtOWU2ZS0yYzg3YmJhNThiZjgvaW5mby55bWw/python" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Créer une clé d’authentification pour ~jdoe~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "nom":"cléAuth$(head -c 9 /dev/urandom|base64|tr '/+' '_-')",
  "portée":1
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" "<<get_api_url()>>/user/jdoe/cles" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN"
#+END_SRC

** Authentification par clé d’authentification pour ~jdoe~

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports none
DATA=$(cat <<EOF
{
  "nom":"cléAuth$(head -c 9 /dev/urandom|base64|tr '/+' '_-')",
  "portée":1,
  "expiration": $(( $(date +%s) + 60 ))
}
EOF
)

RES_CLE=$(/usr/bin/curl --data "$DATA" "<<get_api_url()>>/user/jdoe/cles" -H "Content-Type: application/json" -H "Authorization: Bearer $TOKEN")

NOM_CLE=$(echo $RES_CLE | grep -Po '(?<="id":"jdoe\\/)[^"]*')
SECRET=$(echo $RES_CLE | grep -Po '(?<="secret":")\w*')
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results none :exports code
DATA=$(cat <<EOF
{
  "username":"jdoe",
  "key_name":"$NOM_CLE",
  "key_secret":"$SECRET"
}
EOF
)
#+END_SRC

#+BEGIN_SRC bash :eval yes :session *bash* :results output :exports both :post json_pretty(*this*)
curl --data "$DATA" "<<get_api_url()>>/auth" -H "Content-Type: application/json"
#+END_SRC
